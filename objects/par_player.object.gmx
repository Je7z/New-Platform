<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// This script is called in the create event of moving objects
// Initialize the variables used for movement code
xVel = 0            // X Velocity
yVel = 0            // Y Velocity
xVelSub = 0         // X Sub-pixel movement
yVelSub = 0         // Y Sub-pixel movement
// Previous X/Y coords to use as we see fit
xprev   = 0         // Previous X ausiliary var
yprev   = 0         // Previous Y ausiliary var


grav = 0.4;

movespeed = 2;
jumpspeed = 5;
movespring = 8;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///01 - Inputs
input_left = -keyboard_check(vk_left);
input_right = keyboard_check(vk_right);
input_jump = keyboard_check_pressed(vk_space);


input_up = -keyboard_check(vk_up);
input_down = keyboard_check(vk_down);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///02 - Gravity

if(!place_meeting(x,y + 1,par_block)) {
    yVel += grav;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///03 - Jump and Move

//PAR_BLOCK
on_ground_block = collision_rectangle(bbox_left, bbox_bottom + 1 , bbox_right, bbox_bottom + 1, par_block, true, true)
if on_ground_block {
    if input_jump { yVel = -jumpspeed; }
}

//PAR_THROUGH
on_ground_through = collision_line(bbox_left, bbox_bottom + 1, bbox_right, bbox_bottom + 1, par_through, false, true)
if(on_ground_through) {
    if input_jump {
        yVel = -jumpspeed;
    }
}

//PAR_SPRING
on_ground_spring = collision_line(bbox_left, bbox_bottom + 1, bbox_right, bbox_bottom + 1, par_spring, false, true)
if(on_ground_spring &amp;&amp; vyNew &gt;= - 0.1) {
    yVel = -movespring;
}

//PAR_SPRING
on_ground_ladder = place_meeting(x,y + 1, par_ladder);
if(on_ground_ladder) {
    
    if(collision_point(x - 5, y + 15,par_ladder,false,true)) {
        yVel = (input_up + input_down) * 1;
    } else { 
        if(!input_down) { yVel = 0; }
    }
    
} 


//Moving Horizontal
xVel = (input_left + input_right) * movespeed;




 
  


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///04 - Handle
xVelSub += xVel;
yVelSub += yVel;
vxNew = round(xVelSub);
vyNew = round(yVelSub);
xVelSub -= vxNew;
yVelSub -= vyNew;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///05 - Collision Vertical 
repeat(abs(vyNew)) {

    src_instance_on_way();
    src_instance_on_spring();

    //PAR_BLOCK
    if (!collision_rectangle(bbox_left, bbox_bottom + sign(vyNew) , bbox_right, bbox_top + sign(vyNew), par_block, true, true)) {
       
        //PAR_THROUGH
        if(!place_meeting(x,y + sign(vyNew), par_through) || (bbox_bottom &gt; bbox_on_way)) {
            
            //PAR_SPRING
            if(!place_meeting(x,y + sign(vyNew), par_spring) || (bbox_bottom &gt; bbox_on_spring)) {
                y += sign(vyNew)
            } else { yVel = 0; break; }
            
        } else { yVel = 0; break; }
        
    }  else { yVel = 0; }
    
  
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

///06 - Collision Horizontal
repeat(abs(vxNew)) {

     // Move up slope
    if (place_meeting(x + sign(vxNew), y, par_sloper) &amp;&amp; !place_meeting(x + sign(vxNew), y - 1, par_sloper))
        --y;
    
    // Move down slope
    if (!place_meeting(x + sign(vxNew), y, par_sloper) &amp;&amp; !place_meeting(x + sign(vxNew), y + 1, par_sloper) &amp;&amp; place_meeting(x + sign(vxNew), y + 2, par_sloper))
        ++y;

    // Collision PAR_BLOCK
    if (!collision_rectangle(bbox_left + sign(vxNew) , bbox_bottom, bbox_right + sign(vxNew) , bbox_top, par_block, true, true))
        x += sign(vxNew); 
    else { xVel = 0; break; }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
